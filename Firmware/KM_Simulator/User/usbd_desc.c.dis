/********************************** (C) COPYRIGHT *******************************
 * File Name          : composite_km_desc.h
 * Author             : WCH
 * Version            : V1.0.0
 * Date               : 2022/08/18
 * Description        : All descriptors for the keyboard and mouse composite device.
 *********************************************************************************
 * Copyright (c) 2021 Nanjing Qinheng Microelectronics Co., Ltd.
 * Attention: This software (modified or not) and binary are used for
 * microcontroller manufactured by Nanjing Qinheng Microelectronics.
 *******************************************************************************/

/*******************************************************************************/
/* Header File */
#include "usbd_desc.h"

/*******************************************************************************/
/* Device Descriptor */
const uint8_t MyDevDescr[] =
    {
        0x12,                                              // bLength
        0x01,                                              // bDescriptorType
        0x00, 0x02,                                        // bcdUSB
        0x00,                                              // bDeviceClass
        0x00,                                              // bDeviceSubClass
        0x00,                                              // bDeviceProtocol
        DEF_USBD_UEP0_SIZE,                                // bMaxPacketSize0
        (uint8_t)DEF_USB_VID, (uint8_t)(DEF_USB_VID >> 8), // idVendor
        (uint8_t)DEF_USB_PID, (uint8_t)(DEF_USB_PID >> 8), // idProduct
        0x00, DEF_IC_PRG_VER,                              // bcdDevice
        0x01,                                              // iManufacturer
        0x02,                                              // iProduct
        0x03,                                              // iSerialNumber
        0x01,                                              // bNumConfigurations
};

/* Configuration Descriptor Set */
const uint8_t MyCfgDescr[] =
    {
        /* Configuration Descriptor */
        0x09,       // bLength
        0x02,       // bDescriptorType
        0x42, 0x00, // wTotalLength
        0x02,       // bNumInterfaces
        0x01,       // bConfigurationValue
        0x00,       // iConfiguration
        0xA0,       // bmAttributes: Bus Powered; Remote Wakeup
        0x32,       // MaxPower: 100mA

        // /* Interface Descriptor (Keyboard) */
        // 0x09, // bLength
        // 0x04, // bDescriptorType
        // 0x00, // bInterfaceNumber
        // 0x00, // bAlternateSetting
        // 0x01, // bNumEndpoints
        // 0x03, // bInterfaceClass
        // 0x01, // bInterfaceSubClass
        // 0x01, // bInterfaceProtocol: Keyboard
        // 0x00, // iInterface

        // /* HID Descriptor (Keyboard) */
        // 0x09,       // bLength
        // 0x21,       // bDescriptorType
        // 0x11, 0x01, // bcdHID
        // 0x00,       // bCountryCode
        // 0x01,       // bNumDescriptors
        // 0x22,       // bDescriptorType
        // 0x3E, 0x00, // wDescriptorLength

        // /* Endpoint Descriptor (Keyboard) */
        // 0x07,       // bLength
        // 0x05,       // bDescriptorType
        // 0x81,       // bEndpointAddress: IN Endpoint 1
        // 0x03,       // bmAttributes
        // 0x08, 0x00, // wMaxPacketSize
        // 0x01,       // bInterval: 0.125ms

        /* Interface Descriptor (Data Config HID) */
        0x09, // bLength: Length of this descriptor
        0x04, // bDescriptorType: Interface Descriptor
        0x00, // bInterfaceNumber: Number of Interface
        0x00, // bAlternateSetting: Alternate setting
        0x01, // bNumEndpoints: One endpoint used
        0x03, // bInterfaceClass: HID Class
        0x00, // bInterfaceSubClass: No subclass
        0x00, // bInterfaceProtocol: No protocol
        0x00, // iInterface: No string descriptor

        /* HID Descriptor (Data Config HID) */
        0x09,                                  // bLength
        0x21,                                  // bDescriptorType (HID)
        0x11, 0x01,                            // bcdHID 1.11
        0x00,                                  // bCountryCode
        0x01,                                  // bNumDescriptors
        0x22,                                  // bDescriptorType[0] (HID)
        DEF_USBD_REPORT_DESC_LEN_DC_HID, 0x00, // wDescriptorLength[0] 21

        /* Endpoint Descriptor (OUT) */
        0x07,       // bLength
        0x05,       // bDescriptorType (Endpoint)
        0x01,       // bEndpointAddress (OUT/H2D) OUT Endpoint 1
        0x03,       // bmAttributes (Interrupt)
        0x20, 0x00, // wMaxPacketSize 32
        0x01,       // bInterval 1 (0.125ms)

        /* Interface Descriptor */
        0x09, // bLength
        0x04, // bDescriptorType (Interface)
        0x01, // bInterfaceNumber 1
        0x00, // bAlternateSetting
        0x02, // bNumEndpoints 2
        0x03, // bInterfaceClass
        0x00, // bInterfaceSubClass
        0x00, // bInterfaceProtocol
        0x00, // iInterface (String Index)

        /* HID Descriptor */
        0x09,                               // bLength
        0x21,                               // bDescriptorType
        0x11, 0x01,                         // bcdHID
        0x00,                               // bCountryCode
        0x01,                               // bNumDescriptors
        0x22,                               // bDescriptorType
        DEF_USBD_REPORT_DESC_LEN_HID, 0x00, // wDescriptorLength

        /* Endpoint Descriptor */
        0x07,       // bLength
        0x05,       // bDescriptorType
        0x02,       // bEndpointAddress: OUT Endpoint 2
        0x03,       // bmAttributes
        0x20, 0x00, // wMaxPacketSize
        0x01,       // bInterval: 0.125ms

        /* Endpoint Descriptor */
        0x07,       // bLength
        0x05,       // bDescriptorType
        0x82,       // bEndpointAddress: IN Endpoint 2
        0x03,       // bmAttributes
        0x20, 0x00, // wMaxPacketSize
        0x01,       // bInterval: 0.125ms

};

// /* Keyboard Report Descriptor */
// const uint8_t _KeyRepDesc[] =
//     {
//         0x05, 0x01,       // Usage Page (Generic Desktop)
//         0x09, 0x06,       // Usage (Keyboard)
//         0xA1, 0x01,       // Collection (Application)
//         0x05, 0x07,       // Usage Page (Key Codes)
//         0x19, 0xE0,       // Usage Minimum (224)
//         0x29, 0xE7,       // Usage Maximum (231)
//         0x15, 0x00,       // Logical Minimum (0)
//         0x25, 0x01,       // Logical Maximum (1)
//         0x75, 0x01,       // Report Size (1)
//         0x95, 0x08,       // Report Count (8)
//         0x81, 0x02,       // Input (Data,Variable,Absolute)
//         0x95, 0x01,       // Report Count (1)
//         0x75, 0x08,       // Report Size (8)
//         0x81, 0x01,       // Input (Constant)
//         0x95, 0x03,       // Report Count (3)
//         0x75, 0x01,       // Report Size (1)
//         0x05, 0x08,       // Usage Page (LEDs)
//         0x19, 0x01,       // Usage Minimum (1)
//         0x29, 0x03,       // Usage Maximum (3)
//         0x91, 0x02,       // Output (Data,Variable,Absolute)
//         0x95, 0x05,       // Report Count (5)
//         0x75, 0x01,       // Report Size (1)
//         0x91, 0x01,       // Output (Constant,Array,Absolute)
//         0x95, 0x06,       // Report Count (6)
//         0x75, 0x08,       // Report Size (8)
//         0x26, 0xFF, 0x00, // Logical Maximum (255)
//         0x05, 0x07,       // Usage Page (Key Codes)
//         0x19, 0x00,       // Usage Minimum (0)
//         0x29, 0x91,       // Usage Maximum (145)
//         0x81, 0x00,       // Input(Data,Array,Absolute)
//         0xC0              // End Collection
// };

/* Custom HID Report Descriptor */
const uint8_t Data_Config_HIDReportDesc[] =
    {
        0x06, 0x00, 0xFF, // Usage Page (Vendor Defined 0xFF00)
        0x09, 0x01,       // Usage (0x01)
        0xA1, 0x01,       // Collection (Application)
        0x09, 0x02,       //   Usage (0x02)
        0x15, 0x00,       //   Logical Minimum (0)
        0x26, 0xFF, 0x00, //   Logical Maximum (255)
        0x75, 0x08,       //   Report Size (8)
        0x95, 0x20,       //   Report Count (32)
        0x91, 0x06,       //   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
        0xC0,             // End Collection

        // 21 bytes

};

const uint8_t HIDReportDesc[] =
    {
        0x05, 0x01, // Usage Page (Generic Desktop Ctrls)
        0x09, 0x04, // Usage (Joystick)
        0xA1, 0x01, // Collection (Application)
        0x05, 0x01, //   Usage Page (Generic Desktop Ctrls)
        0x09, 0x01, //   Usage (Pointer)
        0xA1, 0x00, //   Collection (Physical)
        0x09, 0x30, //     Usage (X)
        0x09, 0x31, //     Usage (Y)
        0x15, 0x00, //     Logical Minimum (0)
        0x25, 0xFF, //     Logical Maximum (-1)
        0x75, 0x08, //     Report Size (8)
        0x95, 0x02, //     Report Count (2)
        0x81, 0x06, //     Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
        0xC0,       //   End Collection
        0x05, 0x09, //   Usage Page (Button)
        0x19, 0x01, //   Usage Minimum (0x01)
        0x29, 0x07, //   Usage Maximum (0x07)
        0x15, 0x00, //   Logical Minimum (0)
        0x25, 0x01, //   Logical Maximum (1)
        0x75, 0x01, //   Report Size (1)
        0x95, 0x10, //   Report Count (16)
        0x81, 0x06, //   Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
        0xC0,       // End Collection

        // 44 bytes

};

const uint8_t _HIDReportDesc[] =
    {
        0x05, 0x01, // Usage Page (Generic Desktop Ctrls)
        0x09, 0x04, // Usage (Joystick)
        0xA1, 0x01, // Collection (Application)
        0x05, 0x01, //   Usage Page (Generic Desktop Ctrls)
        0x09, 0x01, //   Usage (Pointer)
        0xA1, 0x00, //   Collection (Physical)
        0x09, 0x30, //     Usage (X)
        0x09, 0x31, //     Usage (Y)
        0x15, 0x00, //     Logical Minimum (0)
        0x25, 0xFF, //     Logical Maximum (-1)
        0x75, 0x08, //     Report Size (8)
        0x95, 0x02, //     Report Count (2)
        0x81, 0x02, //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
        0xC0,       //   End Collection
        0x05, 0x09, //   Usage Page (Button)
        0x19, 0x01, //   Usage Minimum (0x01)
        0x29, 0x07, //   Usage Maximum (0x07)
        0x15, 0x00, //   Logical Minimum (0)
        0x25, 0x01, //   Logical Maximum (1)
        0x75, 0x01, //   Report Size (1)
        0x95, 0x10, //   Report Count (16)
        0x81, 0x02, //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
        0x05, 0x0D, //   Usage Page (Digitizer)
        0x09, 0x01, //   Usage (Digitizer)
        0xA1, 0x02, //   Collection (Logical)
        0x15, 0x00, //     Logical Minimum (0)
        0x25, 0xFF, //     Logical Maximum (-1)
        0x75, 0x08, //     Report Size (8)
        0x95, 0x1C, //     Report Count (28)
        0x91, 0x02, //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
        0xC0,       //   End Collection
        0xC0,       // End Collection

        // 61 bytes

};

/* Qualifier Descriptor */
const uint8_t MyQuaDesc[] =
    {
        0x0A,       // bLength
        0x06,       // bDescriptorType
        0x00, 0x02, // bcdUSB
        0x00,       // bDeviceClass
        0x00,       // bDeviceSubClass
        0x00,       // bDeviceProtocol
        0x40,       // bMaxPacketSize0
        0x00,       // bNumConfigurations
        0x00        // bReserved
};

/* Language Descriptor */
const uint8_t MyLangDescr[] =
    {
        0x04,
        0x03,
        0x09,
        0x04};

/* Manufacturer Descriptor */
const uint8_t MyManuInfo[] =
    {
        0x14,
        0x03,
        'N',
        0,
        'i',
        0,
        't',
        0,
        'r',
        0,
        'e',
        0,
        'n',
        0,
        'e',
        0,
        'P',
        0,
        'L',
        0

};

/* Product Information */
const uint8_t MyProdInfo[] =
    {
        24,
        0x03,
        'A',
        0,
        'g',
        0,
        '.',
        0,
        'S',
        0,
        '.',
        0,
        'D',
        0,
        '.',
        0,
        'V',
        0,
        '.',
        0,
        'X',
        0,
        '.',
        0};

/* Serial Number Information */
const uint8_t MySerNumInfo[] =
    {
        0x16,
        0x03,
        '1',
        0,
        '1',
        0,
        '4',
        0,
        '5',
        0,
        '1',
        0,
        '4',
        0,
        '1',
        0,
        '9',
        0,
        '1',
        0,
        '9',
        0};
